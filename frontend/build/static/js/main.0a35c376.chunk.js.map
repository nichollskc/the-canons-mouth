{"version":3,"sources":["Checkbox.js","SearchPage.js","SearchBar.js","ResultList.js","LoadingSpinner.js","texts.js","CanonText.js","SearchApp.js","reportWebVitals.js","index.js"],"names":["Checkbox","type","name","checked","onChange","SearchPage","props","useState","currentPage","setCurrentPage","pageCount","setPageCount","totalResults","setTotalResults","numFilteredResults","setNumFilteredResults","keyword","setKeyword","searchKeyword","setSearchKeyword","caseInsensitive","setCaseInsensitive","maxErrors","ignoredCharacters","resultList","setResultList","promiseInProgress","setPromiseInProgress","promiseBegun","delayedSetKeyword","useRef","debounce","newValue","delayedSetPromiseInProgress","updateResults","a","console","log","perPage","obj","Array","from","selected_texts","parseInt","objJsonStr","JSON","stringify","encodedRequest","Buffer","toString","fetch","then","response","json","data","numPages","Math","ceil","num_filtered_matches","matches","num_matches","updateCountsByText","counts_by_text","updateKeyword","current","useEffect","handlePageClick","clickData","selected","event","isChecked","target","className","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","forcePage","SearchBar","id","value","placeholder","e","ResultList","class","map","index","text_id","href","start_line","before","matching","after","text_fullname","chapter","errors","key","LoadingSpinner","animation","role","texts","defaultTexts","Set","allTextsOff","allTextsOn","forEach","i","startsChecked","add","CanonText","checkedItems","setCheckedItems","Map","countsByText","setCountsByText","handleCheckboxChange","item","updatedItems","delete","Container","Row","Col","has","full_name","checkbox_key","onClick","xs","newCounts","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","SearchApp","document","getElementById"],"mappings":"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","file":"static/js/main.0a35c376.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Checkbox = ({ type = 'checkbox', name, checked = false, onChange }) => (\n    <input type={type} name={name} checked={checked} onChange={onChange} />\n);\n\nCheckbox.propTypes = {\n    type: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    checked: PropTypes.bool,\n    onChange: PropTypes.func.isRequired,\n}\n\nexport default Checkbox;\n","import React, { useState, useEffect, useRef } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport debounce from 'underscore/modules/debounce.js';\n\nimport Checkbox from './Checkbox';\nimport SearchBar from './SearchBar';\nimport ResultList from './ResultList';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst SearchPage = (props) => {\n    const [currentPage, setCurrentPage] = useState(0);\n    const [pageCount, setPageCount] = useState(0);\n    const [totalResults, setTotalResults] = useState(0);\n    const [numFilteredResults, setNumFilteredResults] = useState(0);\n    const [keyword, setKeyword] = useState('');\n    const [searchKeyword, setSearchKeyword] = useState('');\n    const [caseInsensitive, setCaseInsensitive] = useState(true);\n    const [maxErrors, setMaxErrors] = useState('0');\n    const [ignoredCharacters, setIgnoredCharacters] = useState(';\",.');\n\n    const [resultList, setResultList] = useState();\n    const [promiseInProgress, setPromiseInProgress] = useState(false);\n    const [promiseBegun, setPromiseBegun] = useState(false);\n\n    const delayedSetKeyword = useRef(debounce((newValue) => setSearchKeyword(newValue), 1000));\n    const delayedSetPromiseInProgress = useRef(debounce((newValue) => setPromiseInProgress(newValue), 1));\n\n    const updateResults = async (searchKeyword, currentPage, caseInsensitive, maxErrors, ignoredCharacters) => {\n        console.log(props.perPage);\n        let obj = {\n                  'pattern': searchKeyword,\n                  'config': {'selected_texts': Array.from(props.selected_texts),\n                             'max_errors': parseInt(maxErrors),\n                             'case_insensitive': caseInsensitive,\n                             'ignored_chars': ignoredCharacters },\n        };\n        console.log(obj);\n        let objJsonStr = JSON.stringify(obj);\n        console.log(objJsonStr);\n        let encodedRequest = Buffer.from(objJsonStr).toString(\"base64\");\n        console.log(encodedRequest);\n        setPromiseInProgress(true);\n        return await fetch('/search/' + encodedRequest + '/pp' + props.perPage + '/p' + currentPage)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data)\n                let numPages = Math.ceil(data.num_filtered_matches / props.perPage)\n                setPageCount(numPages)\n                setResultList(data.matches)\n                setTotalResults(data.num_matches)\n                setNumFilteredResults(data.num_filtered_matches)\n                props.updateCountsByText(data.counts_by_text)\n                setPromiseInProgress(false);\n             });\n    }\n\n    const updateKeyword = async (keyword) => {\n        setKeyword(keyword);\n        delayedSetKeyword.current(keyword);\n    };\n\n    // Whenever keyword is updated, send a request to update the results.\n    // Delay this request until no keypresses have been made in the last second to\n    // avoid sending too many requests\n    useEffect(() => {\n        updateResults(searchKeyword, currentPage, caseInsensitive, maxErrors, ignoredCharacters)\n    }, [searchKeyword, currentPage, props.selected_texts, caseInsensitive, maxErrors, ignoredCharacters]);\n\n    useEffect(() => {\n        delayedSetPromiseInProgress.current(promiseBegun)\n    }, [promiseBegun]);\n\n    const handlePageClick = (clickData) => {\n        console.log(currentPage);\n        setCurrentPage(clickData.selected);\n    };\n\n    const handleCaseCheckboxChange = (event) => {\n        const isChecked = event.target.checked;\n        setCaseInsensitive(isChecked);\n    };\n\n    return (\n        <Container>\n            <h1>The Canon's Mouth</h1>\n            <Row>\n                <Col>\n                    <SearchBar keyword={keyword} setKeyword={updateKeyword} />\n                </Col>\n                <Col>\n                    <LoadingSpinner promiseInProgress={promiseInProgress}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <label key=\"case_insensitive_checkbox\">\n                        <Checkbox name=\"case_insensitive\" checked={caseInsensitive} onChange={handleCaseCheckboxChange} />\n                        <span> Case insensitive</span>\n                    </label>\n                </Col>\n            </Row>\n            <Row>\n                <div className=\"results\">\n                    <ReactPaginate\n                      previousLabel={'previous'}\n                      nextLabel={'next'}\n                      breakLabel={'...'}\n                      breakClassName={'break-me'}\n                      pageCount={pageCount}\n                      marginPagesDisplayed={2}\n                      pageRangeDisplayed={5}\n                      onPageChange={handlePageClick}\n                      containerClassName={'pagination'}\n                      subContainerClassName={'pages pagination'}\n                      activeClassName={'active'}\n                      forcePage={currentPage}\n                    />\n                    <p>Total results: {totalResults}. In selected texts: {numFilteredResults}</p>\n                    <ResultList resultList={resultList}/>\n                    <ReactPaginate\n                      previousLabel={'previous'}\n                      nextLabel={'next'}\n                      breakLabel={'...'}\n                      breakClassName={'break-me'}\n                      pageCount={pageCount}\n                      marginPagesDisplayed={2}\n                      pageRangeDisplayed={5}\n                      onPageChange={handlePageClick}\n                      containerClassName={'pagination'}\n                      subContainerClassName={'pages pagination'}\n                      activeClassName={'active'}\n                      forcePage={currentPage}\n                    />\n                </div>\n            </Row>\n        </Container>\n           );\n}\n\nexport default SearchPage\n","import React from 'react';\n\nconst SearchBar = ({keyword,setKeyword}) => {\n      return (\n              <input \n               id=\"searchBar\"\n               value={keyword}\n               placeholder={\"enter search term\"}\n               onChange={(e) => setKeyword(e.target.value)}\n              />\n            );\n}\n\nexport default SearchBar\n","import React from 'react';\n\n\nconst ResultList = ({resultList=[]}) => {\n    return (\n        <div class=\"resultsList\">\n        { resultList.map((data,index) => {\n            if (data) {\n                return (\n                    <div key={data.key} class={`canonText ${data.text_id}`}>\n                        <a href={\"/texts/\" + data.text_id + \".html#line_\" + data.start_line}>\n                        <pre>{data.before}<b>{data.matching}</b>{data.after}</pre>\n                        <div class=\"resultLabel\">\n                            <p>{data.text_fullname}: {data.chapter}</p>\n                            <p>Errors:{data.errors}</p>\n                        </div>\n                        </a>\n                    </div>\n                )\n            }\n            return null\n        })\n        }\n        </div>\n    );\n}\n\nexport default ResultList\n","import React, { Component } from 'react';\nimport Spinner from 'react-bootstrap/Spinner'\n\nconst LoadingSpinner = (props) => {\n    return (\n\t\t<div>\n\t\t{\n\t      (props.promiseInProgress === true) ?\n\t\t    <div>\n\t\t\t\t<span>Searching in database...  </span>\n\t\t\t\t<Spinner animation=\"border\" role=\"status\">\n\t\t\t\t  <span className=\"sr-only\">Loading...</span>\n\t\t\t\t</Spinner>\n\t\t\t</div>\n\t\t  :\n\t\t\tnull\n\t\t}\n\t  </div>\n    )\n};\n\nexport default LoadingSpinner;\n","const texts = [\n  {\n    \"name\": \"malory1\",\n    \"full_name\": \"Malory Part 1\",\n    \"checkbox_key\": \"checkbox_malory1\",\n    \"startsChecked\": true\n  },\n  {\n    \"name\": \"malory2\",\n    \"full_name\": \"Malory Part 2\",\n    \"checkbox_key\": \"checkbox_malory2\",\n    \"startsChecked\": true\n  },\n  {\n    \"name\": \"shakespeare\",\n    \"full_name\": \"Shakespeare full works\",\n    \"checkbox_key\": \"checkbox_shakespeare\",\n    \"startsChecked\": true\n  },\n  {\n    \"name\": \"idylls_king\",\n    \"full_name\": \"Tennyson Idylls of the King\",\n    \"checkbox_key\": \"checkbox_idylls_king\",\n    \"startsChecked\": true\n  },\n  {\n    \"name\": \"faerie_queen\",\n    \"full_name\": \"Spenser's Faerie Queen\",\n    \"checkbox_key\": \"checkbox_faerie_queen\",\n    \"startsChecked\": true\n  },\n  {\n    \"name\": \"bible\",\n    \"full_name\": \"King James Bible\",\n    \"checkbox_key\": \"checkbox_bible\",\n    \"startsChecked\": true\n  },\n  {\n    \"name\": \"aeneid\",\n    \"full_name\": \"Dryden's Aeneid\",\n    \"checkbox_key\": \"checkbox_aeneid\",\n    \"startsChecked\": true\n  },\n  {\n    \"name\": \"iliad\",\n    \"full_name\": \"Pope's Iliad\",\n    \"checkbox_key\": \"checkbox_iliad\",\n    \"startsChecked\": true\n  },\n  {\n    \"name\": \"odyssey\",\n    \"full_name\": \"Pope's Odyssey\",\n    \"checkbox_key\": \"checkbox_odyssey\",\n    \"startsChecked\": true\n  },\n  {\n    \"name\": \"paradise_lost\",\n    \"full_name\": \"Milton Paradise Lost\",\n    \"checkbox_key\": \"checkbox_paradise_lost\",\n    \"startsChecked\": true\n  },\n  {\n    \"name\": \"paradise_regained\",\n    \"full_name\": \"Milton Paradise Regained\",\n    \"checkbox_key\": \"checkbox_paradise_regained\",\n    \"startsChecked\": true\n  },\n  {\n    \"name\": \"mabinogion\",\n    \"full_name\": \"Lady Charlotte Guest's Mabinogion\",\n    \"checkbox_key\": \"checkbox_mabinogion\",\n    \"startsChecked\": true\n  }\n];\n\nexport default texts;\n","import React, { useState, useEffect, useRef } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Checkbox from './Checkbox';\nimport SearchPage from './SearchPage.js';\nimport texts from './texts.js';\n\nconst defaultTexts = new Set();\nconst allTextsOff = new Set();\nconst allTextsOn = new Set();\ntexts.forEach(i => {\n    if (i.startsChecked) {\n        defaultTexts.add(i.name);\n    }\n    allTextsOn.add(i.name);\n});\n\nconst CanonText = (props) => {\n    const [checkedItems, setCheckedItems] = useState(defaultTexts);\n    const [countsByText, setCountsByText] = useState(new Map());\n\n    const handleCheckboxChange = (event) => {\n        const item = event.target.name;\n        const isChecked = event.target.checked;\n        const updatedItems = new Set(checkedItems);\n        if (isChecked) {\n            updatedItems.add(item);\n        } else {\n            updatedItems.delete(item);\n        }\n        setCheckedItems(updatedItems);\n    };\n\n    const handleAllTextsOff = (event) => {\n        setCheckedItems(allTextsOff);\n    };\n\n    const handleAllTextsOn = (event) => {\n        setCheckedItems(allTextsOn);\n    };\n\n    const updateCountsByText = (newCounts) => {\n        setCountsByText(newCounts);\n    };\n\n    useEffect(() => {\n        console.log(countsByText);\n        console.log(countsByText['aeneid']);\n    }, [countsByText]);\n\n    return(\n        <Container>\n            <Row>\n               <Col>\n                   <div id=\"checkboxes\">\n                       <table>\n                           {\n                               texts.map(item => (\n                                   <tr>\n                                       <td>\n                                           <label key={item.checkbox_key}>\n                                               <Checkbox name={item.name} checked={checkedItems.has(item.name)} onChange={handleCheckboxChange} />\n                                               <span><a href={\"/texts/\" + item.name + \".html\"}>{item.full_name}</a></span>\n                                           </label>\n                                       </td>\n                                       <td>\n                                           <span class=\"countForText\">({countsByText[item.name]})</span>\n                                       </td>\n                                   </tr>\n                               ))\n                           }\n                       </table>\n                   </div>\n                   <div id=\"buttonsDiv\">\n                       <button id='allOn' onClick={handleAllTextsOn}>Select all</button>\n                       <button id='allOff' onClick={handleAllTextsOff}>Deselect all</button>\n                   </div>\n               </Col>\n               <Col xs={9}>\n                   <SearchPage perPage={50} selected_texts={checkedItems} updateCountsByText={updateCountsByText}/>\n               </Col>\n           </Row>\n        </Container>\n    );\n}\n\nexport default CanonText;\n\n","import CanonText from './CanonText.js';\n\nfunction App() {\n      return (\n              <div className=\"App\">\n                <header className=\"App-header\">\n                    <CanonText />\n                </header>\n              </div>\n            );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// // components takes precedence over default styles.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SearchApp from './SearchApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SearchApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}